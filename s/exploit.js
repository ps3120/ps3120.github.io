let exploitRunning = false;  // Variabile per evitare esecuzioni multiple

// Funzione di gestione della memoria (Garbage Collection)
function gc() {
    try {
        new Uint8Array(256 * 1024);  // Solo 256KB per evitare il crash
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Funzione principale che gestisce l'exploit
async function main() {
    if (exploitRunning) return;  // Impedisce l'esecuzione multipla

    exploitRunning = true;  // Imposta stato in esecuzione
    alert("Exploit iniziato");

    // Simula la creazione della struttura e l'invio di un messaggio
    alert("Crea la struttura di oggetti");

    // Esegui GC prima e dopo il messaggio
    gc();

    alert("Postando messaggio...");
    // Usa postMessage per simulare il messaggio (senza un destinatario specifico)
    setTimeout(() => {
        alert("Messaggio inviato e atteso.");
        // Simula attesa e verifica
        gc();  // Esegui un'altra garbage collection

        alert("Exploit completato");
        exploitRunning = false;  // Reimposta per permettere esecuzioni future
    }, 2000);  // Aggiungi una breve attesa per simulare l'invio del messaggio
}

// Aggiungi evento per avviare l'exploit al click del pulsante
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
