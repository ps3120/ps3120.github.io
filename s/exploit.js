let exploitRunning = false;  // Variabile per evitare esecuzioni multiple

// Funzione di gestione della memoria (Garbage Collection)
function gc() {
    try {
        new Uint8Array(256 * 1024);  // Solo 256KB per evitare il crash
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Funzione per simulare la creazione di una struttura di oggetti
function createObjectStructure() {
    let obj = new Map();
    obj.set('key', 'value');
    alert('Oggetto creato');
    return obj;
}

// Funzione principale che gestisce l'exploit
async function main() {
    if (exploitRunning) return;  // Impedisce l'esecuzione multipla

    exploitRunning = true;  // Imposta stato in esecuzione
    alert("Exploit iniziato");

    // Esegui la Garbage Collection
    gc();

    alert("Creazione della struttura...");
    const obj = createObjectStructure();  // Crea una struttura di esempio

    alert("Postando messaggio...");
    // Simula l'invio di un messaggio (senza destinatario specifico)
    setTimeout(() => {
        alert("Messaggio inviato e atteso.");
        // Esegui un'altra garbage collection
        gc();  

        alert("Exploit completato");
        exploitRunning = false;  // Reimposta per permettere esecuzioni future
    }, 2000);  // Aggiungi una breve attesa per simulare l'invio del messaggio
}

// Aggiungi evento per avviare l'exploit al click del pulsante
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
